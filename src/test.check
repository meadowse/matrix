#include "s21_matrix.h"

matrix_t result, result_defolt, result_defolt_2, temp, temp2, temp3, test, test2, result_sum, result_sub, result_mult_num, result_mult, result_trans, result_calc, result_inv;
double deter_result = 0, num = 777.777, resul;
int res = 0, result_defol, result_status;
double matrix[3][3] = {{0, 0, 0},
                      {0, 0, 0},
                      {0, 0, 0}}, sum_matrix[3][2] = {{2, 4},
                          {6, 8},
                          {10, 12}}, sub_matrix[3][2] = {{0, 0},
                          {0, 0},
                          {0, 0}}, mult_num_matrix[3][2] = {{2, 4},
                               {6, 8},
                               {10, 12}}, trans_matrix[3][3] = {{1, 3, 5},
                      {2, 4, 6}}, calc_matrix[3][3] = {{0, 10, -20},
                      {4, -14, 8},
                      {-8, -2, 4}}, inv_matrix[2][2] = {{-2.25, 1.25},
                    {1.75, -0.75}};
#test create1
res = s21_create_matrix(0, 5, &test);
ck_assert_int_eq(1, res);

#test create2
res = s21_create_matrix(-2, 5, &test);
ck_assert_int_eq(1, res);

#test create3
res = s21_create_matrix(3, 3, NULL);
ck_assert_int_eq(1, res);

#test create4
res = s21_create_matrix(3, 3, &test);
ck_assert_int_eq(0, res);
s21_remove_matrix(&test);

#test create5
s21_create_matrix(3, 3, &test);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        test.matrix[i][j] = 0;
    }
}
s21_remove_matrix(&test);


#test eq1
res = s21_eq_matrix(NULL, NULL);
ck_assert_int_eq(0, res);

#test eq2
s21_create_matrix(3, 3, &test);
s21_create_matrix(3, 3, &test2);
s21_fill_matrix(&test, 0.5);
s21_fill_matrix(&test2, 0.5);
test.matrix[0][1] = 2;
ck_assert_int_eq(1, s21_eq_matrix(&test, &test));
ck_assert_int_eq(0, s21_eq_matrix(&test, &test2));
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test eq3
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
s21_fill_matrix(&test, 0.5);
s21_fill_matrix(&test2, 3);
ck_assert_int_eq(s21_eq_matrix(&test, &test2), 0);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test eq4
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_create_matrix(3, 3, &temp3);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_eq_matrix(&temp, &temp2), SUCCESS);
ck_assert_int_eq(s21_eq_matrix(&temp, &temp3), FAILURE);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&temp3);

#test eq5
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
temp2.matrix[1][1] = 0;
temp2.matrix[1][2] = 77;
ck_assert_int_eq(s21_eq_matrix(&temp, &temp2), FAILURE);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test eq6
s21_create_matrix(3, 3, &temp);
s21_create_matrix(2, 3, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_eq_matrix(&temp, &temp2), FAILURE);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test eq7
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 21, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_eq_matrix(&temp, &temp2), FAILURE);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test eq8
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
temp.matrix[0][1] = 4.67773;
temp2.matrix[0][1] = 4.67774;
ck_assert_int_eq(s21_eq_matrix(&temp, &temp2), FAILURE);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test sum1
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_sum_matrix(NULL, &test, NULL), 1);
s21_remove_matrix(&test);

#test sum2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_sum_matrix(&test, &test2, &result_sum), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test sum3
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_sum_matrix(&test, &test, &result_sum), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(sum_matrix[i][j], result_sum.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_sum);

#test sum4
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_create_matrix(3, 3, &result_defolt);
s21_fill_matrix(&temp, 1);
s21_anti_fill_matrix(&temp2, 32);
for (int i = 0; (i < temp.rows); i++) {
    for (int j = 0; j < temp.columns; j++) {
        result_defolt.matrix[i][j] = temp.matrix[i][j] + temp2.matrix[i][j];
    }
}
ck_assert_int_eq(s21_sum_matrix(&temp, &temp2, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test sum5
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 0, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_sum_matrix(&temp, &temp2, &result), 1);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test sub1
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_sub_matrix(NULL, &test, NULL), 1);
s21_remove_matrix(&test);

#test sub2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_sub_matrix(&test, &test2, &result_sub), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test sub3
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_sub_matrix(&test, &test, &result_sub), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(sub_matrix[i][j], result_sub.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_sub);

#test sub4
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_create_matrix(3, 3, &result_defolt);
s21_fill_matrix(&temp, 1);
s21_anti_fill_matrix(&temp2, 32);
for (int i = 0; (i < temp.rows); i++) {
    for (int j = 0; j < temp.columns; j++) {
        result_defolt.matrix[i][j] = temp.matrix[i][j] - temp2.matrix[i][j];
    }
}
ck_assert_int_eq(s21_sub_matrix(&temp, &temp2, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test sub5
s21_create_matrix(3, 3, &temp);
s21_create_matrix(0, 3, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_sub_matrix(&temp, &temp2, &result), 1);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test mult_num1
ck_assert_int_eq(s21_mult_number(NULL, 0.25, &result_mult_num), 1);

#test mult_num2
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_mult_number(&test, 2, &result_mult_num), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(mult_num_matrix[i][j], result_mult_num.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_mult_num);

#test mult_num3
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &temp2);
s21_create_matrix(3, 3, &result_defolt);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
for (int i = 0; (i < temp.rows); i++) {
    for (int j = 0; j < temp.columns; j++) {
        result_defolt.matrix[i][j] = temp.matrix[i][j] * 777.777;
    }
}
ck_assert_int_eq(s21_mult_number(&temp, num, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test mult1
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, NULL), 1);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test mult2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, &result_mult), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test mult3
s21_create_matrix(2, 2, &test);
s21_create_matrix(2, 2, &test2);
s21_fill_matrix(&test, 1);
s21_fill_matrix(&test2, 1);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, &result_mult), 0);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);
s21_remove_matrix(&result_mult);

#test mult4
s21_create_matrix(3, 2, &temp);
s21_create_matrix(2, 3, &temp2);
s21_create_matrix(3, 3, &result_defolt);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
result_defolt.matrix[0][0] = 9;
result_defolt.matrix[0][1] = 12;
result_defolt.matrix[0][2] = 15;
result_defolt.matrix[1][0] = 19;
result_defolt.matrix[1][1] = 26;
result_defolt.matrix[1][2] = 33;
result_defolt.matrix[2][0] = 29;
result_defolt.matrix[2][1] = 40;
result_defolt.matrix[2][2] = 51;
ck_assert_int_eq(s21_mult_matrix(&temp, &temp2, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test mult5
s21_create_matrix(2, 3, &temp);
s21_create_matrix(3, 2, &temp2);
s21_create_matrix(2, 2, &result_defolt);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
result_defolt.matrix[0][0] = 22;
result_defolt.matrix[0][1] = 28;
result_defolt.matrix[1][0] = 49;
result_defolt.matrix[1][1] = 64;
ck_assert_int_eq(s21_mult_matrix(&temp, &temp2, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test mult6
s21_create_matrix(3, 3, &temp);
s21_create_matrix(0, 0, &temp2);
s21_fill_matrix(&temp, 1);
s21_fill_matrix(&temp2, 1);
ck_assert_int_eq(s21_mult_matrix(&temp, &temp2, &result), 1);
s21_remove_matrix(&temp);
s21_remove_matrix(&temp2);

#test trans1
ck_assert_int_eq(s21_transpose(NULL, &result_trans), 1);

#test trans2
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_transpose(&test, &result_trans), 0);
for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 3; j++) {
        ck_assert_double_eq_tol(trans_matrix[i][j], result_trans.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_trans);

#test trans3
s21_create_matrix(3, 2, &temp);
s21_create_matrix(2, 3, &result_defolt);
s21_fill_matrix(&temp, 1);
result_defolt.matrix[0][0] = 1;
result_defolt.matrix[0][1] = 3;
result_defolt.matrix[0][2] = 5;
result_defolt.matrix[1][0] = 2;
result_defolt.matrix[1][1] = 4;
result_defolt.matrix[1][2] = 6;
ck_assert_int_eq(s21_transpose(&temp, &result), 0);
ck_assert_int_eq(s21_eq_matrix(&result_defolt, &result), SUCCESS);
s21_remove_matrix(&temp);
s21_remove_matrix(&result);
s21_remove_matrix(&result_defolt);

#test deter1
ck_assert_int_eq(s21_determinant(NULL, &deter_result), 1);

#test deter2
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_determinant(&test, &deter_result), 2);
s21_remove_matrix(&test);

#test deter3
s21_create_matrix(1, 1, &test);
s21_fill_matrix(&test, 1);
s21_determinant(&test, &deter_result);
ck_assert_double_eq_tol(1, deter_result, 0.0000001);
s21_remove_matrix(&test);

#test deter4
s21_create_matrix(2, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_determinant(&test, &deter_result), 0);
ck_assert_double_eq_tol(-2, deter_result, 0.0000001);
s21_remove_matrix(&test);

#test deter5
s21_create_matrix(3, 3, &test);
s21_fill_matrix(&test, 3);
s21_determinant(&test, &deter_result);
ck_assert_double_eq_tol(0, deter_result, 0.0000001);
s21_remove_matrix(&test);

#test deter6
s21_create_matrix(3, 2, &temp);
s21_fill_matrix(&temp, 1);
result_defol = s21_determinant(&temp, &resul);
ck_assert_int_eq(result_defol, 2);
s21_remove_matrix(&temp);

#test deter7
s21_create_matrix(3, 3, &temp);
s21_fill_matrix(&temp, 1);
result_defol = s21_determinant(&temp, &resul);
ck_assert_int_eq(result_defol, 0);
ck_assert_uint_eq(resul, 0);
s21_remove_matrix(&temp);

#test deter8
s21_create_matrix(3, 3, &temp);
temp.matrix[0][0] = 0;
temp.matrix[0][1] = 9;
temp.matrix[0][2] = 5;
temp.matrix[1][0] = 4;
temp.matrix[1][1] = 3;
temp.matrix[1][2] = -5;
temp.matrix[2][0] = -1;
temp.matrix[2][1] = 6;
temp.matrix[2][2] = -4;
result_defol = s21_determinant(&temp, &resul);
ck_assert_int_eq(result_defol, 0);
ck_assert_uint_eq(resul, 324);
s21_remove_matrix(&temp);

#test calc1
ck_assert_int_eq(s21_calc_complements(NULL, &result_calc), 1);

#test calc2
s21_create_matrix(1, 1, &test);
ck_assert_int_eq(s21_calc_complements(&test, &result_calc), 2);
s21_remove_matrix(&test);

#test calc3
s21_create_matrix(3, 3, &test);
test.matrix[0][0] = 1;
test.matrix[0][1] = 2;
test.matrix[0][2] = 3;
test.matrix[1][0] = 0;
test.matrix[1][1] = 4;
test.matrix[1][2] = 2;
test.matrix[2][0] = 5;
test.matrix[2][1] = 2;
test.matrix[2][2] = 1;
ck_assert_int_eq(s21_calc_complements(&test, &result_calc), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        ck_assert_double_eq_tol(calc_matrix[i][j], result_calc.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_calc);

#test calc4
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
result_status = s21_calc_complements(&test, &result);
ck_assert_int_eq(result_status, 2);
s21_remove_matrix(&test);

#test calc5
s21_create_matrix(3, 3, &test);
s21_fill_matrix(&test, 1);
result_status = s21_calc_complements(&test, &result);
ck_assert_int_eq(result_status, 0);
s21_remove_matrix(&test);
s21_remove_matrix(&result);

#test calc6
s21_create_matrix(3, 3, &test);
test.matrix[0][0] = 1;
test.matrix[0][1] = 2;
test.matrix[0][2] = 3;
test.matrix[1][0] = 0;
test.matrix[1][1] = 4;
test.matrix[1][2] = 2;
test.matrix[2][0] = 5;
test.matrix[2][1] = 2;
test.matrix[2][2] = 1;
s21_calc_complements(&test, &result);
s21_create_matrix(3, 3, &test2);
test2.matrix[0][0] = 0;
test2.matrix[0][1] = 10;
test2.matrix[0][2] = -20;
test2.matrix[1][0] = 4;
test2.matrix[1][1] = -14;
test2.matrix[1][2] = 8;
test2.matrix[2][0] = -8;
test2.matrix[2][1] = -2;
test2.matrix[2][2] = 4;
for (int i = 0; i < result.rows; i++) {
    for (int j = 0; j < result.columns; j++) {
        ck_assert_uint_eq(result.matrix[i][j], test2.matrix[i][j]);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&test2);
s21_remove_matrix(&result);

#test inv1
ck_assert_int_eq(s21_inverse_matrix(NULL, &result_inv), 1);

#test inv2
s21_create_matrix(1, 2, &test);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 2);
s21_remove_matrix(&test);

#test inv3
s21_create_matrix(2, 2, &test);
s21_fill_matrix(&test, 1.5);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 0);
for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(inv_matrix[i][j], result_inv.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_inv);

#test inv4
s21_create_matrix(3, 3, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 2);
s21_remove_matrix(&test);

#test inv5
s21_create_matrix(3, 3, &temp);
s21_create_matrix(3, 3, &result_defolt);
temp.matrix[0][0] = 2;
temp.matrix[0][1] = 5;
temp.matrix[0][2] = 7;
temp.matrix[1][0] = 6;
temp.matrix[1][1] = 3;
temp.matrix[1][2] = 4;
temp.matrix[2][0] = 5;
temp.matrix[2][1] = -2;
temp.matrix[2][2] = -3;
result_defolt.matrix[0][0] = 1;
result_defolt.matrix[0][1] = -1;
result_defolt.matrix[0][2] = 1;
result_defolt.matrix[1][0] = -38;
result_defolt.matrix[1][1] = 41;
result_defolt.matrix[1][2] = -34;
result_defolt.matrix[2][0] = 27;
result_defolt.matrix[2][1] = -29;
result_defolt.matrix[2][2] = 24;
s21_inverse_matrix(&temp, &result_defolt_2);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        ck_assert_uint_eq(result_defolt.matrix[i][j],result_defolt_2.matrix[i][j]);
    }
}
s21_remove_matrix(&temp);
s21_remove_matrix(&result_defolt);
s21_remove_matrix(&result_defolt_2);

#test inv6
s21_create_matrix(3, 3, &temp);
s21_fill_matrix(&temp, 1);
result_status = s21_inverse_matrix(&temp, &result);
ck_assert_int_eq(result_status, 2);
s21_remove_matrix(&temp);

#test inv7
s21_create_matrix(0, 0, &temp);
s21_fill_matrix(&temp, 1);
s21_inverse_matrix(&temp, &result);
result_status = s21_inverse_matrix(&temp, &result);
ck_assert_int_eq(result_status, 1);
s21_remove_matrix(&temp);